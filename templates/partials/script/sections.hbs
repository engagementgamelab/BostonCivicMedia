{{!< default}}
{{!-- 
/**
 * Boston Civic Media Website
 * Developed by Engagement Lab, 2016
 * ==============
 * 
 * Script includes partial for individual sections
 * ==========
 */
--}}

<script type="text/javascript">
	$(document).ready(function() {

		/*
		 Analytics start
		 ==============
		*/
		(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

		ga('create', 'UA-64617433-1', 'auto');
		ga('send', 'pageview');
		/*
		 =============
		 Analytics end
		*/

		{{!-- INDEX Template Script --}}
		{{#ifeq section 'home'}}
			
			// Initialize featured projects carousel
			$("#featured_glider").glide({

	        type: "carousel",
	        autoplay: false,
	        autoheight: false, 
	        paddings: '0'

	    });

		{{/ifeq}}

		{{!-- ABOUT Template Script --}}
		{{#ifeq section 'about'}}

			$("#affiliate_glider").glide({

		        type: "carousel",
		        autoplay: false,
		        autoheight: true, 
		        paddings: '0'

		    });

			var gliderDom = $("#partners_glider");
			var gliderApi;

			imageLoaded(gliderDom, function() {
			
				// Initialize partners carousel
				var gliderObj = gliderDom.glide({

		        type: "carousel",
		        autoplay: false,
		        autoheight: true,
		        afterTransition: function(evt) {
		        	// Select corresponding partner
							selectPartner($('.client-image').eq(evt.index-1));
						}
		    
		    });
		    gliderApi = gliderObj.data('glide_api');

				$('.client-image').click(function() {
					// go to slide for index
					var ind = $(this).index()+1;
					gliderApi.go('=' + ind);
					selectPartner($(this));
				});

			});

			function selectPartner(selector) {
				$('.clients>.client-image.selected').removeClass('selected');
				selector.addClass('selected');
			}

		{{/ifeq}}

		{{!-- BIO Template Script --}}
		{{#ifeq section 'person'}}


			var gliderDom = $("#people_glider");
	    var gliderApi;

			imageLoaded(gliderDom, function() {

				// Initialize people carousel
				var gliderObj = gliderDom.glide({
		        type: "carousel",
		        autoplay: false,
		        autoheight: false,
		        startAt: $(gliderDom).data('starting-index')+1,
		        afterInit: function(evt) {
		        	// The people list is invisible by default, show it, but only after a delay to allow page to load
		        	setTimeout(function() {
			        	$(evt.current[0]).fadeTo(500, 1);
		        	} , 500);
		        },
		        beforeTransition: function(evt) {
		        	$(evt.current[0]).fadeTo(100, 0);
		        },
		        afterTransition: function(evt) {
		         	// Show corresponding category
		        	updateCategory();

		        	// Update URL with the person's key
							var personKey = $(".glide__slide.active .person-bio-left").data('key');
							window.history.pushState(null, null, personKey);

		        	$(evt.current[0]).fadeTo(100, 1);
						}
		    });
		    gliderApi = gliderObj.data('glide_api');

		    // Updated people category header
		    function updateCategory() {
		    	
		    	var person = $(".glide__slide.active .person-bio-left");
					var cat = person.data('category');
					
					$('#person_category').text(cat);

		    }

		    updateCategory();

			});

		{{/ifeq}}


		{{!-- SYLLABI Template Script --}}
		{{#ifeq section 'syllabi'}}

			var container = $('#syllabi-content');
			container.isotope({
		    itemSelector: '.syllabi-item'
		  });

	    $('select').change(function(){
		    var selector = $(this);
		    
		    // store filter value in object
		    var group = selector.attr('data-filter-group');
		    filters[group] = selector.find(':selected').attr('data-filter-value');
		    
		    // convert object into array
		    var isoFilters = [];
		    for ( var prop in filters ) {
		      isoFilters.push( filters[ prop ] )
		    }
		    			    
		    var filterStr = isoFilters.join('');
		    container.isotope({ filter: filterStr });
		    
		    return false;
		  });

		{{/ifeq}}

	})
</script>